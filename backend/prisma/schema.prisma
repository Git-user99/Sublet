generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  version          Int           @default(1)
  user_id          String        @unique
  image_id         String        @default("default")
  password         String
  username         String
  email            String        @unique
  phone            String        @unique
  reservation_post Reservation[]
  Post             Post[]
  delete           Boolean       @default(false)
  Request          RequestForm[]
  school           String        @default("무소속")
  id_card          Boolean       @default(false)
  chat_id          String[]      @db.ObjectId
  chat_room        ChatRoom[]    @relation(fields: [chat_id], references: [id])
  Chat             Chat[]
}

model Post {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  version           Int           @default(1)
  key               Int           @unique
  image_id          String[]      @db.ObjectId
  title             String
  basic_info        String
  price             Int
  description       String
  position          String
  rule              String
  refund_policy     String
  benefit           String
  extra_info        String
  start_day         DateTime      @db.Date
  end_day           DateTime      @db.Date
  min_duration      Int
  max_duration      Int
  postuser_id       String        @db.ObjectId
  postuser          User          @relation(fields: [postuser_id], references: [id])
  deleted           Boolean       @default(false)
  post_date         DateTime      @default(now()) @db.Date
  private           Boolean       @default(false)
  request           Boolean       @default(false)
  limit_people      Int
  number_room       Int
  number_bathroom   Int
  number_bedroom    Int
  accomodation_type String //건물 유형
  building_type     String //아파트인지, 주택인지
  contract          Boolean       @default(false) //계약 여부
  Reservation       Reservation[]
  x_coordinate      Float
  y_coordinate      Float
  city              String
  gu                String
  dong              String
  street            String
  street_number     String
  post_code         String
  local_save        Boolean       @default(false)
  ChatRoom          ChatRoom[]
}

model IncrementKey {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  version Int    @default(1)
  postKey Int
}

model Image {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  version    Int    @default(1)
  filename   String
  filetype   String
  image_hash String
}

model RequestForm {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  version           Int      @default(1)
  key               Int      @unique
  delete            Boolean  @default(false)
  limit_people      Int
  number_room       Int
  number_bathroom   Int
  number_bedroom    Int
  price             Int
  city              String
  gu                String
  dong              String
  start_day         DateTime @db.Date
  end_day           DateTime @db.Date
  accomodation_type String //건물 유형
  building_type     String //아파트인지, 주택인지
  school            String //안전한 사용자 -> 같은 학교, 완전한 인증
  alarm             Boolean  @default(false)
  contract          Boolean  @default(false)
  User              User     @relation(fields: [userId], references: [id])
  userId            String   @db.ObjectId
}

model Reservation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  version     Int      @default(1)
  key         Int      @unique
  User        User     @relation(fields: [user_id], references: [id])
  Post        Post     @relation(fields: [post_key], references: [id])
  r_start_day DateTime @db.Date
  r_end_day   DateTime @db.Date
  user_id     String   @db.ObjectId
  post_key    String   @db.ObjectId
  deleted     Boolean  @default(false)
  pay         Int
}

model ReservationIncrementKey {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  version        Int    @default(1)
  reservationKey Int
}

model RequestIncrementKey {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  version    Int    @default(1)
  requestKey Int
}

model ProfileImage {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  version    Int    @default(1)
  filename   String
  filetype   String
  image_hash String
}

model ChatRoom {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  version  Int      @default(1)
  user_id  String[] @db.ObjectId
  user     User[]   @relation(fields: [user_id], references: [id])
  post_key Int
  post     Post     @relation(fields: [post_key], references: [key])
  Chat     Chat[]
}

model Chat {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  version     Int      @default(1)
  user_id     String   @db.ObjectId
  user        User     @relation(fields: [user_id], references: [id])
  chatroom_id String   @db.ObjectId
  chatroom    ChatRoom @relation(fields: [chatroom_id], references: [id])
  message     String
  send_time   DateTime @db.Date @default(now())
}
